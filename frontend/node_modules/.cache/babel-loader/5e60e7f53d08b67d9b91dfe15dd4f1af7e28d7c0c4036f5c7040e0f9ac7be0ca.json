{"ast":null,"code":"import axios from 'axios';\nclass AuthenticationService {\n  registerSuccessfulLogin(username, password) {\n    console.log('registerSuccessfulLogin');\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors();\n  }\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n  setupAxiosInterceptors() {\n    let username = 'in28minutes';\n    let password = 'dummy';\n    let basicAuthHeaderString = 'Basic ' + window.btoa(`${username} : ${password}`); //baisc 64 encoding\n    {\n      Authorization: basicAuthHeaderString;\n    }\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeaderString;\n      }\n      return config;\n    });\n  }\n}\nexport default new AuthenticationService();","map":{"version":3,"names":["axios","AuthenticationService","registerSuccessfulLogin","username","password","console","log","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","basicAuthHeaderString","window","btoa","Authorization","interceptors","request","use","config","headers","authorization"],"sources":["/Users/liwenwen/Desktop/MS/project/todoapp/todo-app/src/components/todo/AuthenticationService.js"],"sourcesContent":["import axios from 'axios'\n\nclass AuthenticationService{\n    registerSuccessfulLogin(username, password){\n        console.log('registerSuccessfulLogin')\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors()\n    }\n    logout(){\n        sessionStorage.removeItem('authenticatedUser');\n    }\n    isUserLoggedIn(){\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) return false\n        return true\n    }\n    getLoggedInUserName(){\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) return ''\n        return user\n    }\n    setupAxiosInterceptors() {\n        let username = 'in28minutes'\n        let password = 'dummy'\n\n        let basicAuthHeaderString = 'Basic ' + window.btoa(`${username} : ${password}`); //baisc 64 encoding\n        {Authorization: basicAuthHeaderString}\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLoggedIn()) {\n                    config.headers.authorization = basicAuthHeaderString\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,qBAAqB;EACvBC,uBAAuBA,CAACC,QAAQ,EAAEC,QAAQ,EAAC;IACvCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtCC,cAAc,CAACC,OAAO,CAAC,mBAAmB,EAAEL,QAAQ,CAAC;IACrD,IAAI,CAACM,sBAAsB,CAAC,CAAC;EACjC;EACAC,MAAMA,CAAA,EAAE;IACJH,cAAc,CAACI,UAAU,CAAC,mBAAmB,CAAC;EAClD;EACAC,cAAcA,CAAA,EAAE;IACZ,IAAIC,IAAI,GAAGN,cAAc,CAACO,OAAO,CAAC,mBAAmB,CAAC;IACtD,IAAGD,IAAI,KAAK,IAAI,EAAE,OAAO,KAAK;IAC9B,OAAO,IAAI;EACf;EACAE,mBAAmBA,CAAA,EAAE;IACjB,IAAIF,IAAI,GAAGN,cAAc,CAACO,OAAO,CAAC,mBAAmB,CAAC;IACtD,IAAGD,IAAI,KAAK,IAAI,EAAE,OAAO,EAAE;IAC3B,OAAOA,IAAI;EACf;EACAJ,sBAAsBA,CAAA,EAAG;IACrB,IAAIN,QAAQ,GAAG,aAAa;IAC5B,IAAIC,QAAQ,GAAG,OAAO;IAEtB,IAAIY,qBAAqB,GAAG,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAAE,GAAEf,QAAS,MAAKC,QAAS,EAAC,CAAC,CAAC,CAAC;IACjF;MAACe,aAAa,EAAEH,qBAAqB;IAAA;IACrChB,KAAK,CAACoB,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;MACR,IAAG,IAAI,CAACX,cAAc,CAAC,CAAC,EAAE;QACtBW,MAAM,CAACC,OAAO,CAACC,aAAa,GAAGT,qBAAqB;MACxD;MACA,OAAOO,MAAM;IACjB,CACJ,CAAC;EACL;AACJ;AAEA,eAAe,IAAItB,qBAAqB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}